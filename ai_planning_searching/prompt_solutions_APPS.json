{"Polycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of $n$ binary words to play a game \"words\". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\nWord reversal is the operation of reversing the order of the characters. For example, the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules. \n\nPolycarp wants to reverse minimal number of words. Please, help him.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of words in the Polycarp's set. Next $n$ lines contain these words. All of $n$ words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\nGuaranteed, that the sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed $4\\cdot10^6$.\n\n\n-----Output-----\n\nPrint answer for all of $t$ test cases in the order they appear.\n\nIf there is no answer for the test case, print -1. Otherwise, the first line of the output should contain $k$ ($0 \\le k \\le n$) \u2014 the minimal number of words in the set which should be reversed. The second line of the output should contain $k$ distinct integers \u2014 the indexes of the words in the set which should be reversed. Words are numerated from $1$ to $n$ in the order they appear. If $k=0$ you can skip this line (or you can print an empty line). If there are many answers you can print any of them.\n\n\n-----Example-----\nInput\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2": ["k = int(input())\nfor i in range(k):\n    is_t = set()\n    a = dict()\n    a['00'] = []\n    a['11'] = []\n    a['01'] = []\n    a['10'] = []    \n    n = int(input())\n    s = []\n    for i in range(n):\n        b = input()\n        a[b[0] + b[-1]].append(i)\n        s.append(b)\n        is_t.add(b)\n    c = len(a['10'])\n    d = len(a['01'])\n    if c + d == 0:\n        if len(a['00']) == 0 or len(a['11']) == 0:\n            print(0)\n        else:\n            print(-1)\n    elif c > d:\n        ans = []\n        i = 0\n        m = (d + c) // 2\n        while d != m and i < len(a['10']):\n            s1 = s[a['10'][i]]\n            if s1[::-1] not in is_t:\n                d += 1\n                ans.append(a['10'][i] + 1)\n            i += 1\n        if d != m:\n            print(-1)\n        else:\n            print(len(ans))\n            print(*ans)\n    else:\n        ans = []\n        i = 0\n        m = (d + c) // 2\n        while c != m and i < len(a['01']):\n            s1 = s[a['01'][i]]\n            if s1[::-1] not in is_t:\n                c += 1\n                ans.append(a['01'][i] + 1)\n            i += 1\n        if c != m:\n            print(-1)\n        else:\n            print(len(ans))\n            print(*ans)\n", "N = int(input())\n\ndef ceildiv(x, y):\n    if x % y == 0:\n        return x // y\n    else:\n        return x // y + 1\n\nfor _ in range(N):\n    doms = []\n    oc, zc = 0, 0\n    n = int(input())\n\n    used = set()\n    fulls = dict()\n\n    for i in range(n):\n        d = input()\n        used.add(d)\n        if d[0] != d[-1]:\n            fulls[i] = d\n            doms.append((i, (d[0], d[-1])))\n        else:\n            if d[0] == '0':\n                zc = 1\n            else:\n                oc = 1\n\n    if len(doms) == 0:\n        if zc == 1 and oc == 1:\n            print(-1)\n        else:\n            print(0)\n    else:\n        # print(doms)\n\n        _01 = 0\n        _10 = 0\n\n        _01_indexes = []\n        _10_indexes = []\n\n\n        for dom in doms:\n            if dom[1] == ('0', '1'):\n                _01 += 1\n                _01_indexes.append(dom[0])\n            else:\n                _10 += 1\n                _10_indexes.append(dom[0])\n\n        if _10 < _01:\n            _01, _10 = _10, _01\n            _01_indexes, _10_indexes = _10_indexes, _01_indexes\n\n        _10_indexes = [x for x in _10_indexes if fulls[x][::-1] not in used] \n\n        need = ceildiv(_10-_01-1, 2)\n        if len(_10_indexes) >= need:\n            print(need)\n            print( ' '.join(list([str(x+1) for x in _10_indexes[:need]])) )\n        else:\n            print(-1)\n\n    # print(\"===\")\n        # print(ceil(abs(doms.count(('0', '1')) - doms.count(('1', '0'))) - 1, 2))\n\n"], "You are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \\neq p_2 $, $p_2 \\neq p_3 $, $p_3 \\neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.": ["import sys\nimport random\nfrom fractions import Fraction\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return list(map(int, tinput()))\n\ndef fiinput():\n    return list(map(float, tinput()))\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\"NO\")\n    else:\n        print(\"YES\")\ndef YESNO(fl):\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():\n    n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    q = [rlinput(), rlinput(), rlinput()]\n    #q = linput()\n    ans = q[0].copy()\n    for i in range(1, n):\n        if ans[i] == ans[i - 1]:\n            ans[i] = q[1][i]\n        if i == n - 1:\n            o = 0\n            while q[o][i] == ans[n - 2] or q[o][i] == ans[0]:\n                o += 1\n            ans[i] = q[o][i]\n    print(*ans)\n\n        \n\n            \n        \n    \n                \n    \n    \n    \n            \n    \n        \n    \n\nfor i in range(iinput()):\n    main()\n", "for _ in range(int(input())):\n  n=int(input())\n  a=list(map(int,input().split()))\n  b=list(map(int,input().split()))\n  c=list(map(int,input().split()))\n  p=a\n  for i in range(n):\n    if p[i]==p[(i+1)%n]:\n      if p[i]!=b[i] and p[(i-1)%n]!=b[i]:p[i]=b[i]\n      else:p[i]=c[i]\n  print(*p)", "for __ in range(int(input())):\n    n = int(input())\n    ar1 = list(map(int, input().split()))\n    ar2 = list(map(int, input().split()))\n    ar3 = list(map(int, input().split()))\n    ans = [ar1[0]]\n    for i in range(1, n - 1):\n        if ar1[i] != ans[-1]:\n            ans.append(ar1[i])\n        elif ar2[i] != ans[-1]:\n            ans.append(ar2[i])\n        elif ar3[i] != ans[-1]:\n            ans.append(ar3[i])\n    if ar1[-1] != ans[-1] and ar1[-1] != ans[0]:\n        ans.append(ar1[-1])\n    elif ar2[-1] != ans[-1] and ar2[-1] != ans[0]:\n        ans.append(ar2[-1])\n    elif ar3[-1] != ans[-1] and ar3[-1] != ans[0]:\n        ans.append(ar3[-1])\n    print(*ans)"], "You are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\n\n\n-----Note-----\n\nThe first test case is described in the problem statement.\n\nIn the second test case all numbers from $1$ to $5$ are beautiful:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 4$ we will have a permutation $[1, 2]$ for $m = 2$;  if $l = 2$ and $r = 4$ we will have a permutation $[3, 1, 2]$ for $m = 3$;  if $l = 2$ and $r = 5$ we will have a permutation $[3, 1, 2, 4]$ for $m = 4$;  if $l = 1$ and $r = 5$ we will have a permutation $[5, 3, 1, 2, 4]$ for $m = 5$.": ["for _ in range(int(input())):\n    input()\n    nums = [int(x) for x in input().split()]\n    new_ar = list(zip(nums,[i for i in range(len(nums))]))\n    new_ar.sort()\n    \n    maxx = new_ar[0][1]\n    minn = new_ar[0][1]\n    s=\"1\"\n    for j in range(1,len(new_ar)):\n        if(new_ar[j][1]>maxx):\n            maxx = new_ar[j][1]\n        if(new_ar[j][1]<minn):\n            minn = new_ar[j][1]\n        if(maxx-minn<j+1):\n            s+=\"1\"\n        else:\n            s+=\"0\"\n        \n    print(s)"], "The sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.": ["def possible(a):\n    ans = set()\n    s = set()\n    lmax = 0\n    for i in range(len(a)):\n        lmax = max(lmax, a[i])\n        s.add(a[i])\n        if lmax == i + 1 and len(s) == i + 1:\n            ans.add(i + 1)\n    return ans\n\n\nt = int(input())\nfor case_num in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    left = possible(a)\n    a.reverse()\n    right = possible(a)\n    ans = []\n    for l in left:\n        if n - l in right:\n            ans.append(l)\n    print(len(ans))\n    for l in ans:\n        print(l, n - l)\n"]}